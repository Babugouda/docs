Q: Different factories

BeanFactory(I)
   ^
   |
ApplicationContext(I)
It adds easier integration with Springâ€™s AOP features; message resource handling (for use in internationalization), 
event publication; and application-layer specific contexts such as the WebApplicationContext for use in web applications


Different types of bean configurations:
1) XML Based configuration
<beans....">
<bean id="testbean" class="orb.test.Test">
</beans>

2) Annotation based configuration
<beans ......">
    <bean id="testbean" class="orb.test.Test">
    <context:annotation-config/>
</beans>

public class Test{

@Autowired
private Test2 test2;

}

3) Java based configuration
@Configuration
public class SpringConfig{
@Bean
public Test test(){
return new Test();
}}

Annotations can replace XML deployment descriptors and configurations.
annotation-config allow us to use @Autowire, @Required and @Qualifier annotations.
component-scan allow @Component, @Service, @Controller, etc.. annotations.

Q: When do we go with Setter and Constructor Injection, pros and cons
A: Difference 
# constructor based injection: 
1) It can be used when object's dependencies are not optional and they must be initialized with their dependencies
2) It can be used if the order of initialization or dependency matters
# Property based injection:
1) when dependencies are optional
2) if the order of initialization or dependency doesn't matters

Q: Spring Security Example: Limit Number of User Session
XML Configuration:
<session-management invalid-session-url="/logout.html">
    <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
</session-management>
Java configuration

Q: Spring security Example: Session timeout
XML Configuration:
<session-config>
    <session-timeout>15</session-timeout>
    <tracking-mode>COOKIE</tracking-mode>
</session-config>

Java configuration

Q: <context:annotation-config>
It is used to activate applied annotations in already registered beans in application context.
<beans>
<bean id="test" class="org.Test"></bean>
<context:annotation-config>
</beans>

Q: <context:component-scan>
This will scan and activate all the beans which are annotated with spring annotations like @Controller, @Component, @Service etc
It eliminates the need for declaring all the beans in the XML files.
<context:component-scan base-package="org.controller"/>

Q: Role of DispatcherServlet and ContextLoaderListener
DispatcherServlet is basically the front controller in the Spring MVC application as it loads the spring bean configuration file 
and initializes all the beans that have been configured. If annotations are enabled, it also scans the packages to configure any bean 
annotated with @Component, @Controller, @Repository or @Service annotations.

ContextLoaderListener, on the other hand, is the listener to start up and shut down the WebApplicationContext in Spring root. 
Some of its important functions includes tying up the lifecycle of ApplicationContext to the lifecycle of the ServletContext and 
automating the creation of ApplicationContext.

Q: uses of the JDBC template in Spring
The Spring JDBC template automatically cleans up the resources; like releasing database connections.
The Spring JDBC template converts the standard JDBC SQLExceptions into RuntimeExceptions. 
This ensures faster response time to identify and eliminate errors.

Q: Different types of autowiring:
Desc: automatic dependency injection. Autowiring can't be used to inject primitive and string values. It works with reference only.
Types:
none(Default)
autowirebyName:  Auto wiring by property name. If the name of a bean is same as the name of other bean property, auto wire it.
autowirebyType: Auto wiring by property data type. If data type of a bean is compatible with the data type of other bean property, auto wire it.
autowire by constructor: byType mode in constructor argument.
autowire with @Autowired and @Qualifier annotations

Spring annotations:
@Component: Generic stereotype for any Spring-managed component, Spring creates the bean when it finds this annotation during component scan and pull it into the application context
@Controller: It is specialized implementation of @Component for indicating controller in spring MVC, The dispatcher scans such annotated classes for mapped methods and detects @RequestMapping annotations
@Service: This annotation is used in our service layer and annotates classes that perform service tasks.
@Repository: It is specialized implementation of @Component for indicating the Data Access Objects (DAO). Advantage of using the @Repository annotation, importing the DAOs into the DI container and also this annotation makes the unchecked exceptions (thrown from DAO methods) eligible for translation into Spring DataAccessException.
