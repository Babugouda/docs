JavaScript
1.  Client-side Processing: This means the code is executed on the userâ€™s processor instead of the web server, thus saving bandwidth and reducing extra load of the server.

2.  Simple to learn: The syntax of this language is similar to simple English making it easier for developers to learn.

3.  Extended Functionality to Web Pages: Third party add-ons help JavaScript developers write snippets that can be utilized on the necessary web pages.

4.  Simple to Implement: Being able to use the same language in front end and back end makes the job easier for development teams.

5.  Inexpensive Language: It does not require any special compilers or editors. All a developer needs is a text editor and a browser to run JavaScript code.

6.  Relatively fast for the end user: No longer do visitors need to fill out an entire form and submit it in order to be told they made a typo in the first field and that they need to fill the complete form again. With JavaScript, each field can be validated as it is entered by the users; this provides immediate feedback when they make a mistake.

7.  Browsers with built-in JavaScript: Website users do not need special software and downloads to view JavaScript; every user gets the same experience.

JavaScript has evolved with additions like like node.js, jQuery (a library), JSON (JavaScript Object Notation)

Java v/s JavaScript
Key differences between Java and JavaScript: Java is an OOP programming language while Java Script is an OOP scripting language. Java creates applications that run in a virtual machine or browser while JavaScript code is run on a browser only. Java code needs to be compiled while JavaScript code are all in text.

1) Execution Environment: Java needs compiler but javascript doesn't need it
2) Static vs Dynamic Typed language: Java is compile time assignment so it's static, Example of dynamic binding in var keyword in javascript which accepts any typr of parameters
3) Constructors : ava has concept of constructors, which has some special properties e.g. constructor chaining and ensuring that super class constructor runs before sub class, on the other hand JavaScript constructors are just another function. There is no special rules for constructors in JavaScript e.g. they cannot have return type or their name must be same as class.
4) Block vs Function based Scoping: Java mainly uses block based scoping i.e. a variable goes out of scope as soon as control comes out of the block, unless until its not a instance or class variable. On the other hand JavaScript mainly uses function based scoping, a variable is accessible in the function they are declared. If you have a global variable and local variable with same name, local will take precedence in JavaScript.


Script v/s Programming
Scripting languages are programming languages that don't require an explicit compilation step. EXP: JavaScript, VB Script, Perl
Programming languages require an explicit compilation step. EXP: Java, .Net, C, C++

Angular JS v/s Node JS
AngularJS is a client-side JavaScript MVC framework to develop a dynamic web application. ... 
Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications built on Google Chrome's JavaScript Engine (V8 Engine)

Java V/s Node JS
1) Java is multi-threaded, Node is single threaded
2) Java is synchronous, Node is asyncronous

Node-JS

Node-v6 installation required

Node js uses:
Asynchronous and Event Driven
Very Fast - Being built on Google Chromes V8 JavaScript Engine, Node.js library is very fast in code execution.
Single Threaded but Highly Scalable - Node.js uses a single threaded model with event looping. Event mechanism helps the server to respond in a non-blocking way and makes the server highly scalable as opposed to traditional servers which create limited threads to handle requests. 
Node.js uses a single threaded program and the same program can provide service to a much larger number of requests than traditional servers like Apache HTTP Server.
No Buffering - Node.js applications never buffer any data. These applications simply output the data in chunks.

Where to use:
I/O bound Applications
Data Streaming Applications
Data Intensive Real-time Applications (DIRT)
JSON APIs based Applications
Single Page Applications

Where Not to Use Node.js?
It is not advisable to use Node.js for CPU intensive applications.


Import resource
var http = require("http");

Create server
http.createServer(function (request, response) {
   // Send the HTTP header 
   // HTTP Status: 200 : OK
   // Content Type: text/plain
   response.writeHead(200, {'Content-Type': 'text/plain'});
   
   // Send the response body as "Hello World"
   response.end('Hello World\n');
}).listen(8081);

REPL stands for (Read Eval Print Loop) : Command prompt editor

Node Package Manager (NPM) : 
	Online repositories for node.js packages/modules which are searchable on search.nodejs.org
	Command line utility to install Node.js packages, do version management and dependency management of Node.js packages.
        npm install express: Install the module 
	var express = require('express'); used to import
Local installation(Default): install in local under node_modules of current directory (npm install express)
Global installation: install in %AppData%\npm\node_modules  (npm install express -g)

Example: events, http, https, path, os, stream, mysql, mongodb




   

